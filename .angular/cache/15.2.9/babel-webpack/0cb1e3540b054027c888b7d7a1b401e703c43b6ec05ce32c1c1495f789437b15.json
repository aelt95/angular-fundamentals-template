{"ast":null,"code":"import { debounceTime, filter, forkJoin, map, Subject, switchMap } from \"rxjs\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./mock-data.service\";\nimport * as i2 from \"@angular/common\";\nimport * as i3 from \"@app/loader/loader.component\";\nfunction AppComponent_ng_container_5_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r7 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r7.name, \" \");\n  }\n}\nfunction AppComponent_ng_container_5_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AppComponent_ng_container_5_div_1_div_1_Template, 2, 1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const results_r2 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", results_r2);\n  }\n}\nfunction AppComponent_ng_container_5_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \" No results \");\n  }\n}\nfunction AppComponent_ng_container_5_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AppComponent_ng_container_5_div_1_Template, 2, 1, \"div\", 7);\n    i0.ɵɵtemplate(2, AppComponent_ng_container_5_ng_template_2_Template, 1, 0, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const results_r2 = ctx.ngIf;\n    const _r4 = i0.ɵɵreference(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", results_r2.length > 0)(\"ngIfElse\", _r4);\n  }\n}\nfunction AppComponent_ng_container_9_div_1_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r14 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" \", item_r14.name, \" \");\n  }\n}\nfunction AppComponent_ng_container_9_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtemplate(1, AppComponent_ng_container_9_div_1_div_1_Template, 2, 1, \"div\", 9);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const results_r9 = i0.ɵɵnextContext().ngIf;\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngForOf\", results_r9);\n  }\n}\nfunction AppComponent_ng_container_9_ng_template_2_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0, \" No results \");\n  }\n}\nfunction AppComponent_ng_container_9_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementContainerStart(0);\n    i0.ɵɵtemplate(1, AppComponent_ng_container_9_div_1_Template, 2, 1, \"div\", 7);\n    i0.ɵɵtemplate(2, AppComponent_ng_container_9_ng_template_2_Template, 1, 0, \"ng-template\", null, 8, i0.ɵɵtemplateRefExtractor);\n    i0.ɵɵelementContainerEnd();\n  }\n  if (rf & 2) {\n    const results_r9 = ctx.ngIf;\n    const _r11 = i0.ɵɵreference(3);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngIf\", results_r9.length > 0)(\"ngIfElse\", _r11);\n  }\n}\nexport class AppComponent {\n  constructor(mockDataService) {\n    this.mockDataService = mockDataService;\n    this.searchTermByCharacters = new Subject();\n    this.isLoading = false;\n    this.subscriptions = [];\n  }\n  ngOnInit() {\n    this.initLoadingState();\n    this.initCharacterEvents();\n  }\n  changeCharactersInput(element) {\n    // 1.1. Add functionality to changeCharactersInput method. Changes searchTermByCharacters Subject value on input change.\n    const inputValue = element.target.value;\n    // YOUR CODE STARTS HERE\n    this.searchTermByCharacters.next(inputValue);\n    // YOUR CODE ENDS HERE\n  }\n\n  initCharacterEvents() {\n    // 1.2. Add API call on each user input. Use mockDataService.getCharacters - to make get request.\n    // 2. Since we don't want to spam our service add filter by input value and do not call API until a user enters at least 3 chars.\n    // 3. Add debounce to prevent API calls until user stop typing.\n    this.charactersResults$ = this.searchTermByCharacters.pipe(\n    // YOUR CODE STARTS HERE\n    debounceTime(300), filter(searchTerm => searchTerm.length >= 3), switchMap(searchTerm => {\n      this.isLoading = true;\n      return this.mockDataService.getCharacters(searchTerm).pipe(map(results => {\n        this.isLoading = false;\n        return results;\n      }));\n    }));\n    // YOUR CODE ENDS HERE\n  }\n\n  loadCharactersAndPlanet() {\n    // 4. On clicking the button 'Load Characters And Planets', it is necessary to process two requests and combine the results of both requests into one result array. As a result, a list with the names of the characters and the names of the planets is displayed on the screen.\n    // Your code should looks like this: this.planetAndCharactersResults$ = /* Your code */\n    // YOUR CODE STARTS HERE\n    this.planetAndCharactersResults$ = forkJoin({\n      planets: this.mockDataService.getPlanets(),\n      characters: this.mockDataService.getCharacters()\n    }).pipe(map(({\n      characters,\n      planets\n    }) => {\n      console.log([]);\n      return [...characters.map(character => ({\n        name: character.name\n      })), ...planets.map(planet => ({\n        name: planet.name\n      }))];\n    }));\n    // YOUR CODE ENDS HERE\n  }\n\n  initLoadingState() {\n    /* 5.1. Let's add loader logic to our page. For each request, we have an observable that contains the state of the request. When we send a request the value is true, when the request is completed, the value becomes false. You can get value data with mockDataService.getCharactersLoader() and mockDataService.getPlanetLoader().\r\n          - Combine the value of each of the streams.\r\n    - Subscribe to changes\r\n    - Check the received value using the areAllValuesTrue function and pass them to the isLoading variable. */\n    // YOUR CODE STARTS HERE\n    // YOUR CODE ENDS HERE\n  }\n  ngOnDestroy() {\n    // 5.2 Unsubscribe from all subscriptions\n    // YOUR CODE STARTS HERE\n    // this.subscriptions.forEach((subscription) => subscription.unsubscribe());\n    // YOUR CODE ENDS HERE\n  }\n  areAllValuesTrue(elements) {\n    return elements.every(el => el);\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)(i0.ɵɵdirectiveInject(i1.MockDataService));\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 11,\n  vars: 8,\n  consts: [[3, \"isLoading\"], [1, \"content\"], [1, \"logo\"], [\"src\", \"https://brandpalettes.com/wp-content/uploads/2021/06/star-wars-color-codes.svg\", \"width\", \"100\"], [3, \"placeholder\", \"keyup\"], [4, \"ngIf\"], [3, \"click\"], [4, \"ngIf\", \"ngIfElse\"], [\"noResults\", \"\"], [4, \"ngFor\", \"ngForOf\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"loader\", 0);\n      i0.ɵɵelementStart(1, \"div\", 1)(2, \"div\", 2);\n      i0.ɵɵelement(3, \"img\", 3);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"input\", 4);\n      i0.ɵɵlistener(\"keyup\", function AppComponent_Template_input_keyup_4_listener($event) {\n        return ctx.changeCharactersInput($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(5, AppComponent_ng_container_5_Template, 4, 2, \"ng-container\", 5);\n      i0.ɵɵpipe(6, \"async\");\n      i0.ɵɵelementStart(7, \"button\", 6);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_7_listener() {\n        return ctx.loadCharactersAndPlanet();\n      });\n      i0.ɵɵtext(8, \"Load Characters And Planets\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵtemplate(9, AppComponent_ng_container_9_Template, 4, 2, \"ng-container\", 5);\n      i0.ɵɵpipe(10, \"async\");\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵproperty(\"isLoading\", ctx.isLoading);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"placeholder\", \"Search by characters\");\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(6, 4, ctx.charactersResults$));\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(10, 6, ctx.planetAndCharactersResults$));\n    }\n  },\n  dependencies: [i2.NgForOf, i2.NgIf, i3.AppLoader, i2.AsyncPipe],\n  styles: [\".content[_ngcontent-%COMP%] {\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  text-align: center;\\n}\\n\\n.logo[_ngcontent-%COMP%] {\\n  display: flex;\\n  justify-content: center;\\n}\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL3NyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwid2VicGFjazovLy4vLi4vLi4vLi4vLi4vRXBhbSUyMExlYXJuaW5nL0VQQU0lMjBFU1AvQW5ndWxhci9hbmd1bGFyLWZ1bmRhbWVudGFscy10ZW1wbGF0ZS9zcmMvYXBwL2FwcC5jb21wb25lbnQuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNJLGFBQUE7RUFDQSxzQkFBQTtFQUNBLHVCQUFBO0VBQ0Esa0JBQUE7QUNDSjs7QURFQTtFQUNJLGFBQUE7RUFDQSx1QkFBQTtBQ0NKIiwic291cmNlc0NvbnRlbnQiOlsiLmNvbnRlbnQge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XHJcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcclxuICAgIHRleHQtYWxpZ246IGNlbnRlcjtcclxufVxyXG5cclxuLmxvZ28ge1xyXG4gICAgZGlzcGxheTogZmxleDtcclxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xyXG59XHJcbiIsIi5jb250ZW50IHtcbiAgZGlzcGxheTogZmxleDtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbn1cblxuLmxvZ28ge1xuICBkaXNwbGF5OiBmbGV4O1xuICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcbn0iXSwic291cmNlUm9vdCI6IiJ9 */\"]\n});","map":{"version":3,"mappings":"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","names":["debounceTime","filter","forkJoin","map","Subject","switchMap","i0","AppComponent","constructor","mockDataService","ngOnInit","initLoadingState","initCharacterEvents","changeCharactersInput","element","inputValue","target","value","searchTermByCharacters","next","charactersResults$","pipe","searchTerm","length","isLoading","getCharacters","results","loadCharactersAndPlanet","planetAndCharactersResults$","planets","getPlanets","characters","console","log","character","name","planet","ngOnDestroy","areAllValuesTrue","elements","every","el","selectors","decls","vars","consts","template","ctx"],"sourceRoot":"","sources":["C:\\Users\\Anthony\\Desktop\\Epam Learning\\EPAM ESP\\Angular\\angular-fundamentals-template\\src\\app\\app.component.ts","C:\\Users\\Anthony\\Desktop\\Epam Learning\\EPAM ESP\\Angular\\angular-fundamentals-template\\src\\app\\app.component.html"],"sourcesContent":["import { Component, OnDestroy, OnInit } from \"@angular/core\";\r\nimport {\r\n  combineLatest,\r\n  debounceTime,\r\n  filter,\r\n  forkJoin,\r\n  map,\r\n  Observable,\r\n  Subject,\r\n  Subscription,\r\n  switchMap,\r\n} from \"rxjs\";\r\nimport { MockDataService } from \"./mock-data.service\";\r\n\r\n@Component({\r\n  selector: \"app-root\",\r\n  templateUrl: \"./app.component.html\",\r\n  styleUrls: [\"./app.component.scss\"],\r\n})\r\nexport class AppComponent implements OnInit, OnDestroy {\r\n  searchTermByCharacters = new Subject<string>();\r\n  charactersResults$!: Observable<any>;\r\n  planetAndCharactersResults$!: Observable<any>;\r\n  isLoading: boolean = false;\r\n  subscriptions: Subscription[] = [];\r\n\r\n  constructor(private mockDataService: MockDataService) {}\r\n\r\n  ngOnInit(): void {\r\n    this.initLoadingState();\r\n    this.initCharacterEvents();\r\n  }\r\n\r\n  changeCharactersInput(element: any): void {\r\n    // 1.1. Add functionality to changeCharactersInput method. Changes searchTermByCharacters Subject value on input change.\r\n    const inputValue: string = element.target.value;\r\n    // YOUR CODE STARTS HERE\r\n    this.searchTermByCharacters.next(inputValue);\r\n    // YOUR CODE ENDS HERE\r\n  }\r\n\r\n  initCharacterEvents(): void {\r\n    // 1.2. Add API call on each user input. Use mockDataService.getCharacters - to make get request.\r\n\r\n    // 2. Since we don't want to spam our service add filter by input value and do not call API until a user enters at least 3 chars.\r\n\r\n    // 3. Add debounce to prevent API calls until user stop typing.\r\n\r\n    this.charactersResults$ = this.searchTermByCharacters.pipe(\r\n      // YOUR CODE STARTS HERE\r\n      debounceTime(300),\r\n      filter((searchTerm: string) => searchTerm.length >= 3),\r\n\r\n      switchMap((searchTerm: string) => {\r\n        this.isLoading = true;\r\n\r\n        return this.mockDataService.getCharacters(searchTerm).pipe(\r\n          map((results) => {\r\n            this.isLoading = false;\r\n            return results;\r\n          })\r\n        );\r\n      })\r\n    );\r\n    // YOUR CODE ENDS HERE\r\n  }\r\n\r\n  loadCharactersAndPlanet(): void {\r\n    // 4. On clicking the button 'Load Characters And Planets', it is necessary to process two requests and combine the results of both requests into one result array. As a result, a list with the names of the characters and the names of the planets is displayed on the screen.\r\n    // Your code should looks like this: this.planetAndCharactersResults$ = /* Your code */\r\n    // YOUR CODE STARTS HERE\r\n    this.planetAndCharactersResults$ = forkJoin({\r\n      planets: this.mockDataService.getPlanets(),\r\n      characters: this.mockDataService.getCharacters(),\r\n    }).pipe(\r\n      map(({ characters, planets }) => {\r\n        console.log([]);\r\n        return [\r\n          ...characters.map((character: { name: string }) => ({\r\n            name: character.name,\r\n          })),\r\n          ...planets.map((planet: { name: string }) => ({ name: planet.name })),\r\n        ];\r\n      })\r\n    );\r\n    // YOUR CODE ENDS HERE\r\n  }\r\n\r\n  initLoadingState(): void {\r\n    /* 5.1. Let's add loader logic to our page. For each request, we have an observable that contains the state of the request. When we send a request the value is true, when the request is completed, the value becomes false. You can get value data with mockDataService.getCharactersLoader() and mockDataService.getPlanetLoader().\r\n\r\n    - Combine the value of each of the streams.\r\n    - Subscribe to changes\r\n    - Check the received value using the areAllValuesTrue function and pass them to the isLoading variable. */\r\n    // YOUR CODE STARTS HERE\r\n    // YOUR CODE ENDS HERE\r\n  }\r\n\r\n  ngOnDestroy(): void {\r\n    // 5.2 Unsubscribe from all subscriptions\r\n    // YOUR CODE STARTS HERE\r\n    // this.subscriptions.forEach((subscription) => subscription.unsubscribe());\r\n    // YOUR CODE ENDS HERE\r\n  }\r\n\r\n  areAllValuesTrue(elements: boolean[]): boolean {\r\n    return elements.every((el) => el);\r\n  }\r\n}\r\n","<loader [isLoading]=\"isLoading\"></loader>\r\n<div class=\"content\">\r\n    <div class=\"logo\">\r\n        <img src=\"https://brandpalettes.com/wp-content/uploads/2021/06/star-wars-color-codes.svg\" width=\"100\"/>\r\n    </div>\r\n\r\n    <input (keyup)=\"changeCharactersInput($event)\" [placeholder]=\"'Search by characters'\"/>\r\n    <ng-container *ngIf=\"charactersResults$ | async as results\">\r\n        <div *ngIf=\"results.length > 0; else noResults\">\r\n            <div *ngFor=\"let item of results\">\r\n                {{ item.name }}\r\n            </div>\r\n        </div>\r\n        <ng-template #noResults> No results </ng-template>\r\n    </ng-container>\r\n\r\n    <button (click)=\"loadCharactersAndPlanet()\">Load Characters And Planets</button>\r\n    <ng-container *ngIf=\"planetAndCharactersResults$ | async as results\">\r\n        <div *ngIf=\"results.length > 0; else noResults\">\r\n            <div *ngFor=\"let item of results\">\r\n                {{ item.name }}\r\n            </div>\r\n        </div>\r\n        <ng-template #noResults> No results </ng-template>\r\n    </ng-container>\r\n</div>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}